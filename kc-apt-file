#!/usr/bin/python3

# Copyright © 2011-2014 Jakub Wilk <jwilk@debian.org>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

'''
apt-file replacement with Tokyo Cabinet backend
'''

import argparse
import collections
import gzip
import os
import re
import shutil
import subprocess as ipc
import sys
import tempfile
import zlib

import apt
import apt_pkg

import kyotocabinet as kc

class xdg(object):
    cache_home = os.environ.get('XDG_CACHE_HOME') or ''
    if not os.path.isabs(cache_home):
        cache_home = os.path.join(os.path.expanduser('~'), '.cache')

def get_cache_filename(mkdir=True):
    home = xdg.cache_home
    path = os.path.join(home, 'debian')
    if mkdir:
        try:
            os.makedirs(path)
        except OSError:
            pass
    return os.path.join(path, 'apt-file.kch')

class AcquireProgress(apt.progress.text.AcquireProgress):
    def __init__(self):
        apt.progress.text.AcquireProgress.__init__(self, outfile=sys.stderr)

class AcquireFailed(RuntimeError):
    pass

class Acquire(apt_pkg.Acquire):

    def run(self):
        rc = apt_pkg.Acquire.run(self)
        if rc != self.RESULT_CONTINUE:
            raise AcquireFailed('fetching files failed')
        for file in self.items:
            if file.status != file.STAT_DONE:
                raise AcquireFailed('fetching file failed: {uri}'.format(uri=file.desc_uri))

class ParseError(RuntimeError):
    pass

def do_update(options):
    parse = re.compile(b'^(.*\S)\s+(\S+)$').match
    data = collections.defaultdict(list)
    if options.quiet:
        fetcher = Acquire()
    else:
        progress = AcquireProgress()
        fetcher = Acquire(progress)
    files = {}
    tmpdir = tempfile.mkdtemp(prefix='kc-apt-file.')
    try:
        for section in options.sections:
            uri = '{mirror}/dists/{dist}/{section}/Contents-{arch}.gz'.format(
                mirror=options.mirror,
                dist=options.distribution,
                section=section,
                arch=options.architecture
            )
            files[section] = apt_pkg.AcquireFile(fetcher,
                uri=uri,
                descr='{dist}/{section}/Contents-{arch}'.format(
                    dist=options.distribution,
                    section=section,
                    arch=options.architecture
                ),
                destfile=os.path.join(tmpdir, section),
            )
        fetcher.run()
        for file in files.values():
            skip = True
            with gzip.open(file.destfile) as file:
                for line in file:
                    if skip:
                        if line.startswith(b'FILE'):
                            skip = False
                    else:
                        match = parse(line)
                        if match is None:
                            raise ParseError('cannot parse line: {0}'.format(repr(line)[1:]))
                        filename, packages = match.groups()
                        for package in [pkg.split(b'/')[-1] for pkg in packages.split(b',')]:
                            data[package] += [filename]
    finally:
        shutil.rmtree(tmpdir)
    db = kc.DB()
    db.open(options.cache_file, db.OWRITER | db.OCREATE | db.OTRUNCATE)
    try:
        for package, filenames in data.items():
            db[package] = zlib.compress(b'\n'.join(filenames), 1)
            filenames[:] = []
    finally:
        db.close()

def strings_to_regexp(strings, regexp=False, whole=True):
    if regexp:
        result = '|'.join(strings)
    else:
        result = '(?:{0})'.format('|'.join(map(re.escape, strings)))
        if whole:
            result = '^{0}$'.format(result)
    return re.compile(result)

def do_list(options):
    regexp = strings_to_regexp(options.packages, options.regexp)
    matching = re.compile(regexp).search
    db = kc.DB()
    db.open(options.cache_file, db.OREADER)
    try:
        for package in db:
            package = package.decode('ASCII')
            if matching(package):
                filenames = zlib.decompress(db[package]).decode('UTF-8')
                filenames = filenames.splitlines()
                for filename in filenames:
                    print('{pkg}: /{file}'.format(pkg=package, file=filename))
    finally:
        db.close()

def do_search(options):
    regexp = strings_to_regexp(options.terms, options.regexp, whole=False)
    matching = re.compile(regexp).search
    db = kc.DB()
    db.open(options.cache_file, db.OREADER)
    try:
        for package in db:
            filenames = zlib.decompress(db[package]).decode('UTF-8')
            filenames = filenames.splitlines()
            package = package.decode('ASCII')
            for filename in filenames:
                if matching('/' + filename):
                    print('{pkg}: /{file}'.format(pkg=package, file=filename))
    finally:
        db.close()

class default_architecture(object):

    def __init__(self):
        self._cache = None

    def __str__(self):
        if self._cache is None:
            self._cache = ipc.getoutput('dpkg --print-architecture').strip()
        return self._cache

class default:
    mirror = 'http://httpredir.debian.org/debian'
    distribution = 'unstable'
    architecture = default_architecture()
    sections = ['main', 'contrib', 'non-free']

def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--cache-file',
        help='use this cache file (default: {path})'.format(path=get_cache_filename(mkdir=False))
    )
    subparsers = parser.add_subparsers(dest='command')
    cmd_update = subparsers.add_parser('update', help='download indices from a Debian mirror')
    cmd_update.add_argument('-m', '--mirror', default=default.mirror,
        help='Debian mirror to use (default: {mirror})'.format(mirror=default.mirror)
    )
    cmd_update.add_argument('-a', '--architecture', default=default.architecture,
        help='architecture to use'
    )
    cmd_update.add_argument('-d', '--distribution', default=default.distribution,
        help='distribution to use (default: {dist})'.format(dist=default.distribution)
    )
    cmd_update.add_argument('-s', '--sections', metavar='SECTION', nargs='+', default=default.sections,
        help='distribution to use (default: {sections})'.format(sections=', '.join(default.sections))
    )
    cmd_update.add_argument('-q', '--quiet', action='store_true')
    cmd_list = subparsers.add_parser('list', help='list files of the package(s)')
    cmd_list.add_argument('packages', metavar='PACKAGE', nargs='+')
    cmd_list.add_argument('-E', '--regexp', action='store_true')
    cmd_search = subparsers.add_parser('search', help='search for file(s)')
    cmd_search.add_argument('terms', metavar='TERM', nargs='+')
    cmd_search.add_argument('-E', '--regexp', action='store_true')
    options = parser.parse_args()
    if options.cache_file is None:
        options.cache_file = get_cache_filename()
    command = options.command
    globals()['do_' + command](options)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
