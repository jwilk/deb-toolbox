#!/usr/bin/python3

# Copyright © 2009-2015 Jakub Wilk <jwilk@jwilk.net>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

'''
Generate URLs from Sources files.
'''

import argparse
import sys

from debian import deb822

default_mirror = 'http://httpredir.debian.org/debian'

def print_urls(mirror, indices, hashfn=None):
    if not mirror.endswith('/'):
        mirror += '/'
    if hashfn is None:
        output_format = '{directory}{filename}'
    else:
        output_format = '{hash}  {filename}'
    if hashfn is None or hashfn == 'md5':
        field = 'Files'
    elif hashfn in ('sha1', 'sha256'):
        field = 'Checksums-{0}'.format(hashfn)
    else:
        raise ValueError
    for index_filename in indices:
        with open(index_filename) as index:
            for pkg in deb822.Packages.iter_paragraphs(index):
                directory = mirror + pkg.get('directory', '') + '/'
                try:
                    entries = pkg[field]
                except KeyError:
                    print('Skipping: {0}'.format(pkg['package']), file=sys.stderr)
                    continue
                for entry in entries.splitlines():
                    if not entry:
                        continue
                    hashsum, size, filename = entry.split()
                    print(output_format.format(directory=directory, filename=filename, hash=hashsum))

def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--mirror', default=default_mirror, help='mirror to download files from (default: %s)' % default_mirror)
    parser.add_argument('--hash', choices=('md5', 'sha1', 'sha256'), help='output checksum')
    parser.add_argument('indices', metavar='SOURCES_FILE', nargs='+', help='a Sources file')
    options = parser.parse_args()
    print_urls(options.mirror, options.indices, options.hash)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
