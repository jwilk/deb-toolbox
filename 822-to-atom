#!/usr/bin/python3

# Copyright © 2012, 2013, 2014 Jakub Wilk <jwilk@debian.org>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

'''
Convert some 822 hosted on ftp-master to the Atom syndication format.

https://ftp-master.debian.org/new.822
https://ftp-master.debian.org/deferred/status
'''

import argparse
import datetime
import email.utils
import re
import sys

import lxml.etree as etree

import apt_pkg

ns_atom = 'http://www.w3.org/2005/Atom'
ns_xhtml = 'http://www.w3.org/1999/xhtml'

def rfc3339(date):
    return date.strftime('%Y-%m-%dT%H:%M:%S') + 'Z'

def elem(parent, name, tail='\n', nsmap=None, **attrib):
    if parent.text is None:
        parent.text = '\n'
    result = etree.SubElement(parent, name, attrib=attrib, nsmap=nsmap)
    result.tail = '\n'
    return result

def parse_addr(addr):
    try:
        name, email = addr.split('<', 1)
    except ValueError:
        name = None
        email = addr
    else:
        name = name.strip()
        email = email.rstrip('>')
    return name, email

def fix_email(email):
    # work-around for bug #662024
    return re.sub('(.*@.*)(@debian[.]org)$', lambda m: m.group(1), email)

def read_tag_file(file):
    return apt_pkg.TagFile(file)

class converter(object):

    def get_title(self):
        raise NotImplementedError

    def get_self_uri(self):
        raise NotImplementedError

    def get_extra_uris(self):
        return ()

    def get_entry_uri(self, para):
        return None

    def get_entry_timestamp(self, para):
        raise NotImplementedError

    def get_changes_base_uri(self):
        raise NotImplementedError

    def __call__(self):
        feed = etree.Element('feed', nsmap={None: ns_atom})
        e_title = elem(feed, 'title')
        e_title.text = self.get_title()
        e_id = elem(feed, 'id')
        e_id.text = 'https://ftp-master.debian.org/new.atom'
        elem(feed, 'link', rel='self', type='application/atom+xml', href=self.get_self_uri())
        for media_type, alternate_uri in self.get_alternate_uris():
            elem(feed, 'link', rel='alternate', type=media_type, href=alternate_uri)
        e_updated = elem(feed, 'updated')
        e_updated.text = rfc3339(datetime.datetime.utcnow())
        e_updated.tail += '\n';
        for para in read_tag_file(sys.stdin):
            uri = self.get_entry_uri(para)
            entry = elem(feed, 'entry')
            if uri is not None:
                elem(entry, 'link', href=uri)
            e_title = elem(entry, 'title')
            e_title.text = changes = para['Changes-File']
            timestamp = self.get_entry_timestamp(para)
            e_ident = elem(entry, 'id')
            e_ident.text = '{base_uri}{changes}#{timestamp}'.format(
                base_uri=self.get_changes_base_uri(),
                changes=changes,
                timestamp=rfc3339(timestamp),
            )
            e_updated = elem(entry, 'updated')
            e_updated.text = rfc3339(timestamp)
            author_name, author_email = parse_addr(para['Changed-By'])
            if author_name is None:
                author_name = author_email
            e_author = elem(entry, 'author')
            e_author_name = elem(e_author, 'name')
            e_author_name.text = author_name
            e_author_email = elem(e_author, 'email')
            e_author_email.text = author_email
            try:
                sponsor_email = para['Sponsored-By']
            except LookupError:
                pass
            else:
                sponsor_email = fix_email(sponsor_email)
                e_sponsor = elem(entry, 'contributor')
                e_sponsor_name = elem(e_sponsor, 'name')
                e_sponsor_name.text = sponsor_email # FIXME!
                e_sponsor_email = elem(e_sponsor, 'email')
                e_sponsor_email.text = sponsor_email
            e_content = elem(entry, 'content', type='xhtml')
            e_div = elem(e_content, 'div', nsmap={None: ns_xhtml})
            e_pre = elem(e_div, 'pre'.format(ns=ns_xhtml))
            e_pre.text = str(para)
            entry.tail += '\n'
        feed.tail = '\n'
        etree.ElementTree(feed).write(sys.stdout.buffer)

class convert_new(converter):

    def get_title(self):
        return 'Debian NEW and BYHAND Packages'

    def get_self_uri(self):
        return 'https://ftp-master.debian.org/new.atom'

    def get_alternate_uris(self):
        yield 'text/html', 'https://ftp-master.debian.org/new.html'
        yield 'text/plain', 'https://ftp-master.debian.org/new.822'

    def _get_entry_epochless_version(self, para):
        version = para['Version'].split()[0]
        if ':' in version:
            _, epochless_version = version.split(':', 1)
            return epochless_version
        else:
            return version

    def get_entry_uri(self, para):
        return 'https://ftp-master.debian.org/new/{source}_{version}.html'.format(
            source=para['Source'],
            version=self._get_entry_epochless_version(para)
        )

    def get_entry_timestamp(self, para):
        return datetime.datetime.utcfromtimestamp(
            int(para['Last-Modified'])
        )

    def get_changes_base_uri(self):
        return 'https://ftp-master.debian.org/new/'

class convert_deferred(converter):

    def get_title(self):
        return 'Deferred upload to Debian'

    def get_self_uri(self):
        return 'https://ftp-master.debian.org/deferred.atom'

    def get_alternate_uris(self):
        yield 'text/html', 'https://ftp-master.debian.org/deferred.html'
        yield 'text/plain', 'https://ftp-master.debian.org/deferred/status'

    def get_entry_timestamp(self, para):
        timetuple = email.utils.parsedate_tz(para['Date'])
        timestamp = datetime.datetime(*timetuple[:7])
        timestamp -= datetime.timedelta(seconds = timetuple[9])
        return timestamp

    def get_entry_uri(self, para):
        return '{base_uri}{changes}'.format(
            base_uri=self.get_changes_base_uri(),
            changes=para['Changes-File']
        )

    def get_changes_base_uri(self):
        return 'https://ftp-master.debian.org/deferred/'

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--type', choices=('new', 'deferred'), required=True)
    options = parser.parse_args()
    converter = globals()['convert_{type}'.format(type=options.type)]()
    return converter()

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
