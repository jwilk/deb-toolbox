#!/usr/bin/python3

# Copyright © 2010-2015 Jakub Wilk <jwilk@debian.org>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import argparse
import contextlib
import io
import re
import sys
import urllib.request
import xml.etree.ElementTree as etree

from debian import deb822

block_size = 0x10000

_accepted = re.compile('Accepted ([0-9][0-9a-z.:~+-]*) in').match
_pgpsig = re.compile('>(-----BEGIN PGP SIGNED MESSAGE-----\n.*\n-----END PGP SIGNATURE-----\n)', re.DOTALL).search

def wget(url):
    print('+', url, file=sys.stderr)
    return urllib.request.urlopen(url)

def download_file(changes_item):
    url = 'http://snapshot.debian.org/file/{hash}'.format(hash=changes_item['sha1'])
    with contextlib.closing(wget(url)) as in_file:
        with open(changes_item['name'], 'wb') as out_file:
            while 1:
                block = in_file.read(block_size)
                if not block:
                    break
                out_file.write(block)

def download_changes(source, version=None):
    prefix_length = 1 if not source.startswith('lib') else 4
    prefix = source[:prefix_length]
    news_url = 'https://packages.qa.debian.org/{s}/{src}/news.rss20.xml'.format(s=prefix, src=source)
    news = wget(news_url)
    news = etree.parse(news)
    for item in news.getiterator('item'):
        title = item.find('title').text
        link = item.find('description').text
        m = _accepted(title)
        if m is None:
            continue
        version = version or m.group(1)
        if version == m.group(1):
            break
    else:
        raise Exception('no such version')
    changes_url = etree.fromstring(link.encode('ASCII', 'replace')).get('href')
    changes = wget(changes_url).read().decode('UTF-8')
    changes = _pgpsig(changes).group(1)
    changes = etree.fromstring('<root>{0}</root>'.format(changes)).text
    with open('{src}_{ver}_snapshot.changes'.format(src=source, ver=version), 'wt', encoding='UTF-8') as out_file:
        out_file.write(changes)
    changes = io.StringIO(changes)
    changes = deb822.Changes.gpg_stripped_paragraph(changes)
    [changes] = deb822.Changes.iter_paragraphs(changes)
    for item in changes['Checksums-Sha1']:
        download_file(item)

def main():
    oparser = argparse.ArgumentParser()
    oparser.add_argument('source')
    oparser.add_argument('version', nargs='?')
    options = oparser.parse_args()
    download_changes(options.source, options.version)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
