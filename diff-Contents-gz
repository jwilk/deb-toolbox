#!/usr/bin/python3

# Copyright Â© 2010-2023 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections
import gzip
import os
import re
import subprocess as ipc
import sys

0_0  # Python >= 3.6 is required

def arch_string_key(s):
    return -len(s), s

class Arch():

    _cache = {}

    def __new__(cls, name):
        try:
            return Arch._cache[name]
        except KeyError:
            new = object.__new__(cls)
            Arch._cache[name] = new
            return new

    def __init__(self, name):
        self._name = name
        multiarch = ipc.check_output(['dpkg-architecture', '-a' + name, '-qDEB_HOST_MULTIARCH']).strip()
        wb = br'\b'
        self._multiarch_sub = re.compile(wb + multiarch + wb).sub
        self._build_id_sub = re.compile(br'(?<=/[.]build-id/)[0-9a-f]{2}/[0-9a-f]{38}[.]debug$').sub

    def replace(self, s):
        s = self._multiarch_sub(b'${DEB_HOST_MULTIARCH}', s)
        s = self._build_id_sub(b'*/*.debug', s)
        return s

    def __str__(self):
        return self._name

def new_package_dict():
    return collections.defaultdict(set)

data = collections.defaultdict(new_package_dict)

arch_map = {}

def removesuffix(s, suffix):
    if s.endswith(suffix):
        return s[:-len(suffix)]
    return s

def error(msg):
    prog = argparse.ArgumentParser().prog
    print(f'{prog}: {msg}', file=sys.stderr)
    sys.exit(1)

ap = argparse.ArgumentParser()
ap.add_argument('paths', metavar='PATH', nargs='+')
opts = ap.parse_args()

for path in opts.paths:
    path_noext = removesuffix(path, '.gz')
    if path == path_noext:
        error(f'{path}: not a .gz file')
    basename = os.path.basename(path_noext)
    try:
        archname = basename.rsplit('-', 1)[1]
    except IndexError:
        error(f'{path}: cannot extract architecture name')
    arch = Arch(archname)
    arch_map[path] = arch

for path in opts.paths:
    print(path, '...', end='', file=sys.stderr, flush=True)
    arch = arch_map[path]
    n = -1
    with gzip.open(path) as file:
        skip = True
        for n, line in enumerate(file):
            if n == 0 and not line.startswith(b'This file maps each file '):
                skip = False
            if skip:
                if line.startswith(b'FILE'):
                    skip = False
                continue
            path, packages = line.rsplit(None, 1)
            path = arch.replace(path)
            packages = packages.decode('ASCII').split(',')
            for package in packages:
                package = package.rsplit('/', 1)[-1]
                data[package][path].add(arch)
        if skip:
            print(' error', file=sys.stderr, flush=True)
            error(f'{path}: empty file')
    assert n >= 0
    print(f' {n+1} lines read', file=sys.stderr, flush=True)

n_archs = len(frozenset(arch_map.values()))
for package, package_data in sorted(data.items()):
    groups = collections.defaultdict(list)
    for path, archs in package_data.items():
        groups[frozenset(archs)] += [path]
    if len(groups) == 1:
        [archs] = groups.keys()
        if len(archs) == n_archs:
            continue
        archs_descr = str.join(',', map(str, archs))
        print(f'{package}/{archs_descr}')
        print()
    else:
        for archs, paths in groups.items():
            if len(archs) == n_archs:
                continue
            archs_descr = str.join(',', map(str, archs))
            print(f'{package}/{archs_descr}')
            for path in sorted(paths):
                print(f'  {repr(path)[2:-1]}')
        print()

# vim:ts=4 sts=4 sw=4 et
