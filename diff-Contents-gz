#!/usr/bin/python3

# Copyright © 2010, 2014 Jakub Wilk <jwilk@debian.org>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED “AS IS” AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
# INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import collections
import gzip
import os
import re
import subprocess as ipc
import sys

bitbucket = open(os.devnull, 'w')

def arch_string_key(s):
    return -len(s), s

class Arch(object):

    _cache = {}

    def __new__(cls, name):
        try:
            return Arch._cache[name]
        except KeyError:
            new = object.__new__(cls)
            Arch._cache[name] = new
            return new

    def __init__(self, name):
        self._name = name
        multiarch = ipc.check_output(['dpkg-architecture', '-a' + name, '-qDEB_HOST_MULTIARCH']).strip()
        wb = br'\b'
        self._multiarch_sub = re.compile(wb + multiarch + wb).sub
        self._build_id_sub = re.compile(br'(?<=/[.]build-id/)[0-9a-f]{2}/[0-9a-f]{38}[.]debug$').sub

    def replace(self, s):
        s = self._multiarch_sub(b'${DEB_HOST_MULTIARCH}', s)
        s = self._build_id_sub(b'*/*.debug', s)
        return s

    def __str__(self):
        return self._name

def new_package_dict():
    return collections.defaultdict(set)

data = collections.defaultdict(new_package_dict)

arch_map = {}
filenames = sys.argv[1:]

for filename in filenames:
    basename, _ = os.path.splitext(os.path.basename(filename))
    arch = Arch(basename.split('-', 1)[1])
    arch_map[filename] = arch

for filename in filenames:
    print('Reading {}'.format(filename), file=sys.stderr)
    arch = arch_map[filename]
    with gzip.open(filename) as file:
        skip = True
        for line in file:
            if skip:
                if line.startswith(b'FILE'):
                    skip = False
                continue
            filename, packages = line.rsplit(None, 1)
            filename = arch.replace(filename)
            packages = packages.decode('ASCII').split(',')
            for package in packages:
                package = package.rsplit('/', 1)[-1]
                data[package][filename].add(arch)

print('Writing results', file=sys.stderr)

n_archs = len(frozenset(arch_map.values()))
for package, package_data in sorted(data.items()):
    groups = collections.defaultdict(list)
    for filename, archs in package_data.items():
        groups[frozenset(archs)] += [filename]
    if len(groups) == 1:
        [archs] = groups.keys()
        if len(archs) == n_archs:
            continue
        archs_descr = ','.join(map(str, archs))
        print('{}/{}'.format(package, archs_descr))
        print()
    else:
        for archs, filenames in groups.items():
            if len(archs) == n_archs:
                continue
            archs_descr = ','.join(map(str, archs))
            print('{}/{}'.format(package, archs_descr))
            for filename in sorted(filenames):
                print('  {}'.format(repr(filename)[2:-1]))
        print()

# vim:ts=4 sts=4 sw=4 et
