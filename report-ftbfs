#!/usr/bin/python3

# Copyright Â© 2011-2017 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import gzip
import os
import pwd
import re
import socket
import subprocess as ipc
import sys
import tempfile
import urllib.request

import jinja2

lambda: (yield from 0)  # Python >= 3.3 is required

def get_full_name():
    return (
        os.getenv('DEBFULLNAME') or
        pwd.getpwuid(os.getuid()).pw_gecos.split(',')[0]
    )

def get_email():
    return (
        os.getenv('DEBEMAIL') or
        '{login}@{domain}'.format(login=pwd.getpwduid(os.getuid()).pw_name, domain=socket.getfqdn())
    )

mailinglist_map = {
    'arm64': 'debian-arm',
    'armel': 'debian-arm',
    'armhf': 'debian-arm',
    'hurd-i386': 'debian-hurd',
    'kfreebsd-amd64': 'debian-bsd',
    'kfreebsd-i386': 'debian-bsd',
    'mipsel': 'debian-mips',
    'ppc64': 'debian-powerpc',
    's390x': 'debian-s390',
}

usertag_map = {
    'amd64': None,
    'armel': 'eabi',
    'i386': None,
    'kfreebsd-amd64': 'kfreebsd',
    'kfreebsd-i386': 'kfreebsd',
    'hurd-i386': 'hurd',
}

default_template = jinja2.Template('''\
From: {{name}} <{{email}}>
To: submit@bugs.debian.org
Subject: {{source}}: FTBFS{% if archspecific %} on {{arch}}{% endif %}
X-Debbugs-No-Ack: please
X-Debbugs-CC: {{email}}

Source: {{source}}
Version: {{version}}
Severity: serious
Justification: fails to build from source
{% if usertag %}\
User: {{mailinglist}}@lists.debian.org
Usertags: {{usertag}}
{% endif %}
{{source}} FTBFS{% if archspecific %} on {{arch}}{% endif %}:\
''')

qa_doublebuild_template = jinja2.Template('''\
From: {{name}} <{{email}}>
To: submit@bugs.debian.org
Subject: {{source}}: FTBFS if built twice in a row{% if reason %}: {{reason}}{% endif %}
X-Debbugs-No-Ack: please
X-Debbugs-CC: {{email}}

Source: {{source}}
Version: {{version}}
Severity: important
User: debian-qa@lists.debian.org
Usertags: qa-doublebuild

{{source}} FTBFS if built twice in a row:\
''')

python_template = jinja2.Template('''\
From: {{name}} <{{email}}>
To: submit@bugs.debian.org
Subject: {{source}}: FTBFS with Python {{python_version}}
X-Debbugs-No-Ack: please
X-Debbugs-CC: {{email}}

Source: {{source}}
Version: {{version}}
Severity: important
User: debian-python@lists.debian.org
Usertags: python{{python_version}}

{{source}} FTBFS if built against Python {{python_version}}:\
''')

def main(options):
    if options.mutt:
        sys.stdout = mail_template = tempfile.NamedTemporaryFile(mode='w+', prefix='report-ftbfs', suffix='.mail')
    if options.logname.startswith(('http://', 'https://')):
        url = options.logname + '&raw=1'
        request = urllib.request.Request(url, headers={'Accept-Encoding': 'gzip'})
        ca_options = {}
        if sys.version_info < (3, 4, 3):
            ca_options.update(cadefault=True)
        log_file = urllib.request.urlopen(request, **ca_options)
    else:
        url = None
        log_file = open(options.logname, 'rb')
    try:
        log = log_file.read()
    finally:
        log_file.close()
    try:
        content_encoding = log_file.getheader('Content-Encoding', 'identity')
    except AttributeError:
        # on-disk files don't have the concept of Content-Encoding
        content_encoding = 'identity'
    if content_encoding == 'gzip':
        log = gzip.decompress(log)
    else:
        assert content_encoding == 'identity'
    log = log.decode('UTF-8', 'replace')
    source = re.search(r'^dpkg-buildpackage:(?: info:)? source package (\S+)$', log, re.MULTILINE).group(1)
    version = re.search(r'^dpkg-buildpackage:(?: info:)? source version (\S+)$', log, re.MULTILINE).group(1)
    architecture = re.search(r'^dpkg-buildpackage:(?: info:)? host architecture (\S+)$', log, re.MULTILINE).group(1)
    if options.arch_specific:
        usertag = usertag_map.get(architecture, architecture)
        mailinglist = mailinglist_map.get(architecture, 'debian-' + architecture)
    else:
        usertag = mailinglist = None
    template = default_template
    reason = None
    extra_context = {}
    if options.qa_doublebuild:
        template = qa_doublebuild_template
        for s in 'aborting due to unexpected upstream changes', 'unrepresentable changes to source':
            if ('dpkg-source: error: ' + s) in log:
                reason = s
                break
            if ('dpkg-source: ' + s) in log:
                reason = s
                break
    elif options.python:
        template = python_template
        extra_context['python_version'] = options.python
    print(template.render(
        extra_context,
        name=get_full_name(),
        email=get_email(),
        source=source,
        arch=architecture,
        version=version,
        mailinglist=mailinglist,
        usertag=usertag,
        archspecific=options.arch_specific,
        reason=reason,
    ))
    for line in log.splitlines():
        print(('| ' + line).rstrip())
    print()
    if url is not None:
        print('Full build log:')
        print(options.logname)
    sys.stdout = sys.__stdout__
    if options.mutt:
        mail_template.flush()
        ipc.check_call(['mutt', '-H', mail_template.name])

def validate_python_version(v):
    if re.match('^[23][.][0-9]+$', v):
        return v
    raise ValueError
validate_python_version.__name__ = 'python version'

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--arch-specific', action='store_true')
    parser.add_argument('-m', '--mutt', action='store_true')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--qa-doublebuild', action='store_true')
    group.add_argument('--python', type=validate_python_version)
    parser.add_argument('logname', metavar='<logfile>')
    options = parser.parse_args()
    main(options)

# vim:ts=4 sts=4 sw=4 et
