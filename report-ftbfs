#!/usr/bin/python3

# Copyright Â© 2011 Jakub Wilk <jwilk@debian.org>

# Redistribution and use in source and compiled forms, with or without
# modification, are permitted under any circumstances. No warranty.

import argparse
import os
import pwd
import re
import socket
import subprocess as ipc
import sys
import tempfile
import urllib.request

import jinja2

def get_full_name():
    return (
        os.getenv('DEBFULLNAME') or
        pwd.getpwuid(os.getuid()).pw_gecos.split(',')[0]
    )

def get_email():
    return (
        os.getenv('DEBEMAIL') or
        '{login}@{domain}'.format(login=pwd.getpwduid(os.getuid()).pw_name, domain=socket.getfqdn())
    )

def get_date():
    return email.utils.formatdate()

mailinglist_map = {
    'armel': 'debian-arm',
    'armhf': 'debian-arm',
    'kfreebsd-amd64': 'debian-bsd',
    'kfreebsd-i386': 'debian-bsd',
    'mipsel': 'debian-mips',
    'ppc64': 'debian-powerpc',
    's390x': 'debian-s390',
}

usertag_map = {
    'amd64': None,
    'armel': 'eabi',
    'i386': None,
}

default_template = jinja2.Template('''\
From: {{name}} <{{email}}>
To: submit@bugs.debian.org
Subject: {{source}}: FTBFS{% if archspecific %} on {{arch}}{% endif %}
X-Debbugs-No-Ack: please
X-Debbugs-CC: {{email}}

Source: {{source}}
Version: {{version}}
Severity: serious
Justification: fails to build from source
{% if usertag %}\
User: {{mailinglist}}@lists.debian.org
Usertags: {{usertag}}
{% endif %}
{{source}} FTBFS{% if archspecific %} on {{arch}}{% endif %}:\
''')

qa_doublebuild_template = jinja2.Template('''\
From: {{name}} <{{email}}>
To: submit@bugs.debian.org
Subject: {{source}}: FTBFS if built twice in a row{% if reason %}: {{reason}}{% endif %}
X-Debbugs-No-Ack: please
X-Debbugs-CC: {{email}}

Source: {{source}}
Version: {{version}}
Severity: important
User: debian-qa@lists.debian.org
Usertags: qa-doublebuild

{{source}} FTBFS if built twice in a row:\
''')

def main(options):
    if options.mutt:
        sys.stdout = mail_template = tempfile.NamedTemporaryFile(mode='w+', prefix='report-ftbfs', suffix='.mail')
    if options.logname.startswith(('http://', 'https://')):
        url = options.logname + '&raw='
        log_file = urllib.request.urlopen(url)
    else:
        url = None
        log_file = open(options.logname, 'rb')
    try:
        log = log_file.read().decode('UTF-8', 'replace')
    finally:
        log_file.close()
    source = re.findall('^Package: (.*)$', log, re.MULTILINE)[-1]
    try:
        version = re.findall('^Source-Version: (.*)$', log, re.MULTILINE)[-1]
    except IndexError:
        version = re.findall('^Version: (.*)$', log, re.MULTILINE)[0]
    architecture = re.findall('^Architecture: (.*)$', log, re.MULTILINE)[-1]
    if options.arch_specific:
        usertag = usertag_map.get(architecture, architecture)
        mailinglist = mailinglist_map.get(architecture, 'debian-' + architecture)
    else:
        usertag = mailinglist = None
    template = default_template
    reason = None
    if options.qa_doublebuild:
        template = qa_doublebuild_template
        for s in 'aborting due to unexpected upstream changes', 'unrepresentable changes to source':
            if ('dpkg-source: error: ' + s) in log:
                reason = s
                break
    print(template.render(
        name=get_full_name(),
        email=get_email(),
        source=source,
        arch=architecture,
        version=version,
        mailinglist=mailinglist,
        usertag=usertag,
        archspecific=options.arch_specific,
        reason=reason,
    ))
    for line in log.splitlines():
        print(('| ' + line).rstrip())
    print()
    if url is not None:
        print('Full build log:')
        print(options.logname)
    sys.stdout = sys.__stdout__
    if options.mutt:
        mail_template.flush()
        ipc.check_call(['mutt', '-H', mail_template.name])

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--arch-specific', action='store_true')
    parser.add_argument('-m', '--mutt', action='store_true')
    parser.add_argument('--qa-doublebuild', action='store_true')
    parser.add_argument('logname', metavar='<logfile>')
    options = parser.parse_args()
    main(options)

# vim:ts=4 sw=4 et
