#!/usr/bin/python3

# Copyright Â© 2010-2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import collections

import ldap3

exceptions = set()

def get_porterboxes():
    results = collections.defaultdict(list)
    with ldap3.Connection('ldaps://db.debian.org') as lc:
        lc.search(
            'dc=debian,dc=org',
            '(&(objectClass=debianServer)(purpose=porterbox))',
            ldap3.SUBTREE,
            attributes=['access', 'status', 'architecture', 'hostname']
        )
        for box in lc.response:
            box = box['attributes']
            [status] = box.get('status') or ['']
            [access] = box.get('access') or ['']
            if status.startswith('down') or access.startswith('lockdown'):
                continue
            architecture = box['architecture']
            if isinstance(architecture, list):
                [architecture] = architecture
            [hostname] = box['hostname']
            if hostname in exceptions:
                continue
            results[architecture] += [hostname]
    if 'i386' not in results:
        # amd64 porterbox provides i386 chroots
        results['i386'] = results['amd64']
    return results

def main():
    oparser = argparse.ArgumentParser()
    oparser.add_argument('-u', '--unique', action='store_true')
    oparser.add_argument('--dns', action='store_true')
    oparser.add_argument('architecture', metavar='ARCHITECTURE', nargs='?')
    options = oparser.parse_args()
    if options.dns:
        options.unique = True
    porterboxes = get_porterboxes()
    template = '{host}'
    if options.architecture is None:
        template = '{arch}\t' + template
    if options.dns:
        template = '{arch}-porterbox in cname {host}.'
    for architecture, hostnames in sorted(porterboxes.items()):
        if options.unique:
            debian_org_hostnames = [h for h in hostnames if h.endswith('.debian.org')]
            if debian_org_hostnames:
                hostnames = debian_org_hostnames
            hostnames = [hostnames[0]]
        if options.architecture is not None and architecture != options.architecture:
            continue
        for hostname in hostnames:
            print(template.format(host=hostname, arch=architecture))

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
